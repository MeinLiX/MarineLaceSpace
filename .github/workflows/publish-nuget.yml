name: Publish NuGet Packages

on:
  push:
    branches: [ main ]
    paths:
      - 'BuildingBlocks/Packages/**/*.csproj'
      - 'BuildingBlocks/Packages/**/Directory.Build.props'
  workflow_dispatch: 

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup environment variables
      run: |
        mkdir -p $GITHUB_WORKSPACE/MarineLaceSpacePackages
        
        echo "MLS_LOCAL_PACKAGE_PATH=$GITHUB_WORKSPACE/MarineLaceSpacePackages" >> $GITHUB_ENV
        echo "GITHUB_MLS_USER=${{ github.actor }}" >> $GITHUB_ENV
        echo "GITHUB_MLS_GHP=${{ secrets.NUGET_API_KEY }}" >> $GITHUB_ENV
        
        echo "Created package directory at $GITHUB_WORKSPACE/MarineLaceSpacePackages"
        
    - name: Add GitHub NuGet source (safe)
      run: |
        if dotnet nuget list source | grep -q "github"; then
          echo "NuGet source 'github' already exists. Removing it to avoid conflict."
          dotnet nuget remove source github
        fi

        dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          --name "github" \
          --username "${{ github.actor }}" \
          --password "${{ secrets.NUGET_API_KEY }}" \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: |
        echo "Using package path: $MLS_LOCAL_PACKAGE_PATH"
        echo "Using GitHub user: $GITHUB_MLS_USER"
        
        dotnet restore BuildingBlocks/Packages/Packages.sln
    
    - name: Build solution
      run: dotnet build BuildingBlocks/Packages/Packages.sln --configuration Release --no-restore
    
    - name: Find all project files
      id: find-projects
      run: |
        ALL_PROJECTS=$(find BuildingBlocks/Packages -name "*.csproj")
        
        echo "Found projects: $ALL_PROJECTS"
        {
          echo "all_projects<<EOF"
          echo "$ALL_PROJECTS"
          echo "EOF"
        } >> $GITHUB_OUTPUT
    
    - name: Check NuGet package existence and versions
      id: check-packages
      run: |
        PACKAGES_TO_PUBLISH=()
        
        for PROJECT_PATH in $(echo "${{ steps.find-projects.outputs.all_projects }}" | tr ' ' '\n'); do
          if [ -n "$PROJECT_PATH" ]; then
            echo "Checking project: $PROJECT_PATH"
            
            PACKAGE_ID_PREFIX="${{ github.repository_owner }}."
            PROJECT_NAME=$(basename "$PROJECT_PATH" .csproj)
            PACKAGE_ID="$PACKAGE_ID_PREFIX$PROJECT_NAME"
            
            VERSION_PREFIX=$(grep -o '<VersionPrefix>[^<]*' "$PROJECT_PATH" | sed 's/<VersionPrefix>//')
            VERSION_SUFFIX=$(grep -o '<VersionSuffix>[^<]*' "$PROJECT_PATH" | sed 's/<VersionSuffix>//')
            
            if [ -z "$VERSION_PREFIX" ]; then
              DIR_BUILD_PROPS=$(dirname "$PROJECT_PATH")/Directory.Build.props
              if [ -f "$DIR_BUILD_PROPS" ]; then
                VERSION_PREFIX=$(grep -o '<VersionPrefix>[^<]*' "$DIR_BUILD_PROPS" | sed 's/<VersionPrefix>//')
                VERSION_SUFFIX=$(grep -o '<VersionSuffix>[^<]*' "$DIR_BUILD_PROPS" | sed 's/<VersionSuffix>//')
              fi
            fi
            
            if [ -z "$VERSION_PREFIX" ]; then
              echo "No version information found for $PROJECT_PATH. Skipping."
              continue
            fi
            
            if [ -n "$VERSION_SUFFIX" ]; then
              FULL_VERSION="$VERSION_PREFIX-$VERSION_SUFFIX"
            else
              FULL_VERSION="$VERSION_PREFIX"
            fi
            
            echo "Package ID: $PACKAGE_ID, Version: $FULL_VERSION"
            
            PACKAGE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.PAT_GITHUB }}" \
              "https://api.github.com/orgs/${{ github.repository_owner }}/packages/nuget/$PROJECT_NAME/versions" | \
              grep -o "\"name\":\"$FULL_VERSION\"" || echo "")
            
            if [ -z "$PACKAGE_EXISTS" ]; then
              echo "Package $PACKAGE_ID version $FULL_VERSION does not exist. Will publish."
              PACKAGES_TO_PUBLISH+=("$PROJECT_PATH")
            else
              echo "Package $PACKAGE_ID version $FULL_VERSION already exists. Skipping."
            fi
          fi
        done
        
        if [ ${#PACKAGES_TO_PUBLISH[@]} -gt 0 ]; then
          echo "packages_to_publish=${PACKAGES_TO_PUBLISH[*]}" >> $GITHUB_OUTPUT
          echo "has_packages=true" >> $GITHUB_OUTPUT
          echo "Packages to publish: ${PACKAGES_TO_PUBLISH[*]}"
        else
          echo "has_packages=false" >> $GITHUB_OUTPUT
          echo "No packages to publish"
        fi
    
    - name: Pack NuGet packages
      if: steps.check-packages.outputs.has_packages == 'true'
      run: |
        for PROJECT_PATH in ${{ steps.check-packages.outputs.packages_to_publish }}; do
          echo "Packing $PROJECT_PATH"
          
          PROJECT_NAME=$(basename "$PROJECT_PATH" .csproj)
          
          REPOSITORY_URL="https://github.com/${{ github.repository }}"
          
          if ! grep -q "<RepositoryUrl>" "$PROJECT_PATH"; then
            sed -i "s|<PropertyGroup>|<PropertyGroup>\n    <RepositoryUrl>$REPOSITORY_URL</RepositoryUrl>|" "$PROJECT_PATH"
          fi
          
          if ! grep -q "<PackageProjectUrl>" "$PROJECT_PATH"; then
            sed -i "s|<PropertyGroup>|<PropertyGroup>\n    <PackageProjectUrl>$REPOSITORY_URL</PackageProjectUrl>|" "$PROJECT_PATH"
          fi
          
          PACKAGE_ID_PREFIX="${{ github.repository_owner }}."
          if ! grep -q "<PackageId>" "$PROJECT_PATH"; then
            sed -i "s|<PropertyGroup>|<PropertyGroup>\n    <PackageId>$PACKAGE_ID_PREFIX$PROJECT_NAME</PackageId>|" "$PROJECT_PATH"
          elif ! grep -q "<PackageId>$PACKAGE_ID_PREFIX" "$PROJECT_PATH"; then
            sed -i "s|<PackageId>\(.*\)</PackageId>|<PackageId>$PACKAGE_ID_PREFIX\1</PackageId>|" "$PROJECT_PATH"
          fi
          
          dotnet pack "$PROJECT_PATH" --configuration Release --no-build --output ./nupkgs
        done
    
    - name: Publish to GitHub Packages
      if: steps.check-packages.outputs.has_packages == 'true'
      run: |
        echo "Publishing packages to GitHub Packages"
        dotnet nuget push "./nupkgs/*.nupkg" --source "github" --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate