// <auto-generated />
using System;
using MarineLaceSpace.Catalog.Data.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarineLaceSpace.Catalog.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20250623122807_AddCompositeKeysAndPriceConstraints")]
    partial class AddCompositeKeysAndPriceConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Auth.AuthUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuthUser");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Auth.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Color", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Material", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowPersonalization")
                        .HasColumnType("boolean");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductColor", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("ColorId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("numeric");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductMaterial", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("MaterialId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("numeric");

                    b.HasKey("ProductId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductPhoto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductColorColorId")
                        .HasColumnType("text");

                    b.Property<string>("ProductColorId")
                        .HasColumnType("text");

                    b.Property<string>("ProductColorProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductMaterialId")
                        .HasColumnType("text");

                    b.Property<string>("ProductMaterialMaterialId")
                        .HasColumnType("text");

                    b.Property<string>("ProductMaterialProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeId")
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeSizeId")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductColorProductId", "ProductColorColorId");

                    b.HasIndex("ProductMaterialProductId", "ProductMaterialMaterialId");

                    b.HasIndex("ProductSizeProductId", "ProductSizeSizeId");

                    b.ToTable("ProductPhotos");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductPrice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OldPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ProductColorColorId")
                        .HasColumnType("text");

                    b.Property<string>("ProductColorId")
                        .HasColumnType("text");

                    b.Property<string>("ProductColorProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductMaterialId")
                        .HasColumnType("text");

                    b.Property<string>("ProductMaterialMaterialId")
                        .HasColumnType("text");

                    b.Property<string>("ProductMaterialProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeId")
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductSizeSizeId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductColorProductId", "ProductColorColorId");

                    b.HasIndex("ProductMaterialProductId", "ProductMaterialMaterialId");

                    b.HasIndex("ProductSizeProductId", "ProductSizeSizeId");

                    b.HasIndex("ProductId", "ProductSizeId", "ProductColorId", "ProductMaterialId")
                        .IsUnique();

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductSize", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("SizeId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("numeric");

                    b.HasKey("ProductId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UrlSlug")
                        .IsUnique();

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Size", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Auth.RefreshToken", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Auth.AuthUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Category", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Product", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductColor", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Product", "Product")
                        .WithMany("AvailableColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductMaterial", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Material", "Material")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Product", "Product")
                        .WithMany("AvailableMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductPhoto", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductColorProductId", "ProductColorColorId");

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.ProductMaterial", "ProductMaterial")
                        .WithMany()
                        .HasForeignKey("ProductMaterialProductId", "ProductMaterialMaterialId");

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeProductId", "ProductSizeSizeId");

                    b.Navigation("Product");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductMaterial");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductPrice", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductColorProductId", "ProductColorColorId");

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.ProductMaterial", "ProductMaterial")
                        .WithMany()
                        .HasForeignKey("ProductMaterialProductId", "ProductMaterialMaterialId");

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeProductId", "ProductSizeSizeId");

                    b.Navigation("Product");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductMaterial");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductReview", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.ProductSize", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Product", "Product")
                        .WithMany("AvailableSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarineLaceSpace.Models.Database.Catalog.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Shop", b =>
                {
                    b.HasOne("MarineLaceSpace.Models.Database.Auth.AuthUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Auth.AuthUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Material", b =>
                {
                    b.Navigation("ProductMaterials");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Product", b =>
                {
                    b.Navigation("AvailableColors");

                    b.Navigation("AvailableMaterials");

                    b.Navigation("AvailableSizes");

                    b.Navigation("Photos");

                    b.Navigation("ProductPrices");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Shop", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarineLaceSpace.Models.Database.Catalog.Size", b =>
                {
                    b.Navigation("ProductSizes");
                });
#pragma warning restore 612, 618
        }
    }
}
